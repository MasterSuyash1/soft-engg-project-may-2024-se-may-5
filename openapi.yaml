openapi: 3.0.3
info:
  title: Online Learning Application  API
  version: 1.0.0
  description: |
    ### This is Online Learning Server based on the OpenAPI 3.0.3 specification.  You can access the application at [https://online_learning.com](https://127.0.0.1:8080). Use this API to; 
    ### 1. Signup, login, logout, get and delete users.
    ### 2. Post Lecture video ratings by Students
    ### 3. Generate Sentiment Analysis of Lecture ratings by Admininstrators
    ### 4. Generate Online session video transcript and notes
    ### 5. Interact with Gen AI Agent using ChatBot
    ### 6. Get and Submit Activity Quiz Questions and Explanation for incorrect answers from Gen AI
    ### 6. Get and Submit Extra Activity Quiz Questions and Explanation for incorrect answers from Gen AI
    ### 7. Get and Submit Graded Quiz Questions and Explanation for incorrect answers from Gen AI
    ### 8. Compile and test the programming code submitted by students using Gen AI
    ### 9. Get help from Gen AI for unsuccessful codes
    ### 10. Generate efficient code using best practices from Gen AI
    ### 11. Generate Student Weekly Performance Report with SWOT analysis
    ### The server needs authentication to consume it's API. The user authentication is done using sessions and not using the traditional token system done. 
    ### Additional Resource: [User Requirements](https://drive.google.com/file/d/1T30H8b8oISQQcP8Uw6pxQAZNtSmAGwvl/view?usp=drive_link), [Story Board and Wireframes](https://drive.google.com/file/d/1u-nIS2nf3Dd9LrTAUz-VLvMB7aJnpM81/view?usp=drive_link), [Project Documentation](https://drive.google.com/file/d/1Qy0An3ckgpsmIUV1zLWlnythaZROL7xl/view?usp=drive_link)
servers:
  - url: http://127.0.0.1:5000
    variables: {}
tags:
  - name: User
    description: User Management 
  - name: Lectures
    description: Student Interations during weekly lessons
  - name: Activity and Extra Questions
    description: Students solving activity and extra questions with Gen AI handholding
  - name: Programming Questions
    description: Student solving programming questions with Gen AI handholding
  - name: Graded Questions
    description: Student solving graded questions 
  - name: Weekly Performance
    description: Generate student weekly performance report with SWOT analysis
paths:
  /signup:
    post:
      tags:
        - User
      summary: User Signup
      description: Create a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: secretpassword
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
  /login:
    post:
      tags:
        - User
      summary: User Login
      description: Log in a user or admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: secretpassword
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  is_admin:
                    type: boolean
                    example: false
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials
  /api/submit_rating:
    post:
      tags:
        - Lectures
      summary: Submit a Rating
      description: Submit a rating for a session or content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                audio:
                  type: integer
                  example: 4
                video:
                  type: integer
                  example: 5
                content:
                  type: integer
                  example: 5
                feedback:
                  type: string
                  example: Great session!
      responses:
        '201':
          description: Rating submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Rating submitted successfully
  /api/ratings:
    get:
      tags:
        - Lectures
      summary: Get Ratings
      description: Retrieve all submitted ratings.
      responses:
        '200':
          description: List of ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 1
                    audio:
                      type: integer
                      example: 4
                    video:
                      type: integer
                      example: 5
                    content:
                      type: integer
                      example: 5
                    feedback:
                      type: string
                      example: Great session!
                    created_at:
                      type: string
                      format: date-time
                      example: '2023-07-29T10:00:00Z'
  /api/users:
    get:
      tags:
        - User
      summary: Get Users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: johndoe
                    email:
                      type: string
                      example: johndoe@example.com
                    created_at:
                      type: string
                      format: date-time
                      example: '2023-07-29T10:00:00Z'
  /api/users/{user_id}:
    delete:
      tags:
        - User
      summary: Delete User
      description: Delete a user by ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
  /api/activity/quiz/{lesson_id}:
    parameters:
      - name: lesson_id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the lesson for which to retrieve questions.
    get:
      tags:
        - Activity and Extra Questions
      summary: Get Quiz Questions
      description: Retrieve questions for a specific lesson ID.
      responses:
        '200':
          description: List of quiz questions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                      description: The question text.
                      example: Which of the following data types is mutable?
                    options:
                      type: array
                      description: List of possible answers.
                      items:
                        type: string
                      example:
                        - int
                        - str
                        - tuple
                        - list
                    correct:
                      type: string
                      description: The correct answer or answers.
                      example: list
                    type:
                      type: string
                      description: The type of question (MCQ or MSQ).
                      example: MCQ
                    marks:
                      type: integer
                      description: Marks assigned for the question.
                      example: 3
                    topic:
                      type: string
                      description: The topic of the lesson.
                      example: Python
        '404':
          description: Lesson or questions not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Lesson not found.
    post:
      tags:
        - Activity and Extra Questions
      summary: Submit Quiz Answers
      description: Submit answers for a quiz and receive scores and explanations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: The ID of the user submitting the quiz.
                  example: 1
                answers:
                  type: object
                  additionalProperties:
                    type: string
                  description: A mapping of question indices to user-provided answers.
                  example:
                    '0': str
      responses:
        '200':
          description: Quiz results with scores and explanations
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    description: List of question results.
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                          description: The question text.
                          example: Which of the following data types is mutable?
                        correct_answer:
                          type: string
                          description: The correct answer.
                          example: list
                        user_answer:
                          type: string
                          description: The answer provided by the user.
                          example: tuple
                        is_correct:
                          type: boolean
                          description: Whether the user's answer was correct.
                          example: false
                        score:
                          type: integer
                          description: The score received for this question.
                          example: 3
                        explanation:
                          type: string
                          description: Explanation for the question, if incorrect.
                          example: >-
                            The correct answer is list because we can change an item in a list by accessing it directly as part of the assignment statement.
                  total_score:
                    type: integer
                    description: The total score achieved by the user.
                    example: 3
                  max_score:
                    type: integer
                    description: The maximum possible score for the quiz.
                    example: 0
                  score_percentage:
                    type: number
                    description: The percentage score achieved.
                    format: float
                    example: 0.0
        '400':
          description: Error in generating explanations
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error generating activity question's explanation.
        '404':
          description: Lesson or questions not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Lesson not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred.
  /api/activity/extra_questions/{lesson_id}:
    parameters:
      - name: lesson_id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the lesson for which to generate extra questions.
    get:
      tags:
        - Activity and Extra Questions
      summary: Generate Extra Questions
      description: >-
        Generates additional questions for a given lesson based on existing quiz
        data.
      responses:
        '200':
          description: A list of new quiz questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_quiz_data:
                    type: array
                    description: A list of generated questions
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                          description: The text of the question.
                          example: Which of the following data types is mutable?
                        options:
                          type: array
                          description: List of possible answers.
                          items:
                            type: string
                          example:
                            - int
                            - str
                            - tuple
                            - list
                        correct:
                          type: string
                          description: The correct answer or answers.
                          example: list
                        type:
                          type: string
                          description: The type of question (MCQ or MSQ).
                          example: MCQ
                        marks:
                          type: integer
                          description: Marks assigned for the question.
                          example: 3
                        topic:
                          type: string
                          description: The topic of the lesson.
                          example: python
        '400':
          description: Error generating questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Error generating extra questions: Some error message.'
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Lesson not found.
    post:
      tags:
        - Activity and Extra Questions
      summary: Submit Answers for Extra Questions
      description: >-
        Submit answers for the extra quiz questions and receive scores and
        explanations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: object
                  additionalProperties:
                    type: string
                  description: A mapping of question indices to user-provided answers.
                  example:
                    '0': str
      responses:
        '200':
          description: Quiz results with scores and explanations
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    description: List of question results.
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                          description: The question text.
                          example: Which of the following data types is mutable?
                        options:
                          type: array
                          description: List of possible answers.
                          items:
                            type: string
                          example:
                            - int
                            - str
                            - tuple
                            - list
                        user_answer:
                          type: string
                          description: The answer provided by the user.
                          example: str
                        correct_answer:
                          type: string
                          description: The correct answer.
                          example: list
                        is_correct:
                          type: boolean
                          description: Whether the user's answer was correct.
                          example: false
                        explanation:
                          type: string
                          description: Explanation for the question, if incorrect.
                          example: >-
                            The correct answer is list because we can change an item in a list by accessing it directly as part of the assignment statement.
                  total_score:
                    type: integer
                    description: The total score achieved by the user.
                    example: 3
                  max_score:
                    type: integer
                    description: The maximum possible score for the quiz.
                    example: 0
        '400':
          description: Error in processing answers or quiz data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Quiz data not found. Please start a new quiz.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred.
  /api/graded/quiz/{week_id}:
    parameters:
      - name: week_id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the week for which to fetch quiz questions.
    get:
      tags:
        - Graded Questions
      summary: Get Graded Quiz Questions
      description: Retrieves graded quiz questions for a specific week.
      responses:
        '200':
          description: List of graded quiz questions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_data:
                    type: array
                    description: A list of graded quiz questions.
                    items:
                      type: object
                      properties:
                        question_id:
                          type: integer
                          description: Unique identifier for the question.
                          example: 1
                        question:
                          type: string
                          description: The text of the question.
                          example: What is the capital of France?
                        options:
                          type: array
                          description: List of possible answers.
                          items:
                            type: string
                          example:
                            - Paris
                            - Berlin
                            - Madrid
                            - Rome
                        correct:
                          type: string
                          description: The correct answer or answers.
                          example: Paris
                        type:
                          type: string
                          description: The type of question (MCQ or MSQ).
                          example: MCQ
                        marks:
                          type: integer
                          description: Marks assigned for the question.
                          example: 3
                        topic:
                          type: string
                          description: The topic of the lesson.
                          example: Geography
        '400':
          description: Error fetching quiz questions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No lesson in this week.
    post:
      tags:
        - Graded Questions
      summary: Submit Answers for Graded Quiz
      description: >-
        Submits user answers for the graded quiz and returns scores and
        explanations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: The ID of the user submitting the quiz.
                  example: 1
                answers:
                  type: object
                  additionalProperties:
                    type: string
                  description: A mapping of question indices to user-provided answers.
                  example:
                    '0': str
      responses:
        '200':
          description: Quiz results with scores and explanations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    description: List of question results.
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                          description: The question text.
                          example: Which of the following data types is mutable?
                        options:
                          type: array
                          description: List of possible answers.
                          items:
                            type: string
                          example:
                            - int
                            - str
                            - tuple
                            - list
                        user_answer:
                          type: string
                          description: The answer provided by the user.
                          example: str
                        correct_answer:
                          type: string
                          description: The correct answer.
                          example: list
                        is_correct:
                          type: boolean
                          description: Whether the user's answer was correct.
                          example: false
                        explanation:
                          type: string
                          description: Explanation for the question, if incorrect.
                          example: >-
                            The correct answer is list because we can change an item in a list by accessing it directly as part of the assignment statement.
                  score:
                    type: integer
                    description: The total score achieved by the user.
                    example: 3
                  max_score:
                    type: integer
                    description: The maximum possible score for the quiz.
                    example: 0
        '400':
          description: Error in processing answers or quiz data not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Quiz data not found. Please start a new quiz.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred.
  /api/transcript_notes/{lesson_id}:
    parameters:
      - name: lesson_id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the lesson associated with the video.
    get:
      tags:
        - Lectures
      summary: Process YouTube Video Transcript
      description: >-
        Retrieves and processes the transcript of a YouTube video for a given
        lesson ID. Generates notes and identifies important topics.
      responses:
        '200':
          description: >-
            Processed transcript details including video embed, transcript text,
            notes, and important topics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  video_embed:
                    type: string
                    description: HTML code to embed the YouTube video.
                    example: >-
                      <iframe id="videoPlayer" width="560" height="315"
                      src="https://www.youtube.com/embed/VIDEO_ID"
                      frameborder="0" allow="accelerometer; autoplay;
                      clipboard-write; encrypted-media; gyroscope;
                      picture-in-picture" allowfullscreen></iframe>
                  transcript_text:
                    type: string
                    description: Raw transcript text of the YouTube video.
                    example: |-
                      00:00 - 00:10: Welcome to the video...
                      00:10 - 00:20: In this segment...
                  notes:
                    type: string
                    description: HTML formatted notes generated from the transcript.
                    example: <p>Important points from the video...</p>
                  important_topics:
                    type: string
                    description: >-
                      HTML formatted important topics extracted from the
                      transcript.
                    example: <h2>Topics discussed</h2><p>Topic 1, Topic 2...</p>
        '400':
          description: Error in processing the video or fetching transcript.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Error extracting transcript: [details]'
        '404':
          description: Lesson or video URL not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Lesson not found.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred.
  /api/weekly_performance_analysis:
    post:
      tags:
        - Weekly Performance
      summary: Generate and Store Weekly Performance Analysis
      description: >-
        Generates a SWOT analysis based on student performance for a given week
        and stores the analysis in the database.
      requestBody:
        description: Data required to generate the weekly performance analysis.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: >-
                    The ID of the user (student) whose performance is being
                    analyzed.
                week_no:
                  type: integer
                  description: >-
                    The week number for which the performance analysis is
                    requested.
              required:
                - user_id
                - week_no
      responses:
        '200':
          description: SWOT analysis successfully generated and stored.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    description: The ID of the user
                  week_no:
                    type: integer
                    description: The week number
                  performance:
                    type: object
                    description: Performance metrics of the user
                    properties:
                      aq_score:
                        type: integer
                        description: Score in Activity Questions
                      pm_score:
                        type: integer
                        description: Score in Practice Questions
                      pp_score:
                        type: integer
                        description: Score in Practice Programming Problems
                      gp_score:
                        type: integer
                        description: Score in Graded Programming Problems
                      gq_score:
                        type: integer
                        description: Score in Graded Questions
                      overall_ai_score:
                        type: number
                        description: Overall AI calculated score
                  swot_analysis:
                    type: object
                    description: SWOT analysis
                    properties:
                      strengths:
                        type: array
                        description: List of strengths identified in the SWOT analysis
                        items:
                          type: string
                      weaknesses:
                        type: array
                        description: List of weaknesses identified in the SWOT analysis
                        items:
                          type: string
                      opportunities:
                        type: array
                        description: List of opportunities identified in the SWOT analysis
                        items:
                          type: string
                      threats:
                        type: array
                        description: List of threats identified in the SWOT analysis
                        items:
                          type: string
        '404':
          description: Error indicating that the user, week, or questions were not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not Found!
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred
  /api/compile:
    post:
      tags:
        - Programming Questions
      summary: Compile and Test Code
      description: >-
        Compiles the provided code, runs it against specified test cases, and
        returns the results.
      requestBody:
        description: Data required to compile and test the code.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code to be compiled and executed.
                  example: "def add(a, b): return a+b"
                language:
                  type: string
                  description: The programming language of the code.
                  example: "python"
                public_test_cases:
                  type: array
                  items:
                    type: object
                    properties:
                      input: 
                        type: array
                        description: Input for the test case.
                        items:
                          type: integer  # specify the type of input elements
                        example: [1, 2]
                      expected_output:
                        type: integer
                        description: Expected output for the test case.
                        example: 3
                  description: List of test cases to validate the code.
                test_code:
                  type: string
                  description: >-
                    Additional code or instructions for testing (not used in the
                    current implementation).
                  example: "{code}\nprint(add({input}))"
              required:
                - code
                - public_test_cases
                - language
      responses:
        '200':
          description: Code compiled and tested successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        input:
                          type: string
                          description: The input provided for the test case.
                          example:
                            "[1,2]"
                        expected_output:
                          type: string
                          description: The expected output for the test case.
                          example:
                            "3"
                        actual_output:
                          type: string
                          description: The actual output from executing the code.
                          example:
                            "3"
                        passed:
                          type: boolean
                          description: >-
                            Indicates whether the actual output matches the
                            expected output.
                          example:
                            true
        '400':
          description: Bad request, missing code or test cases.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Code is required
        '500':
          description: Internal server error, issues during code execution or testing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Compilation error or execution failed
  /api/submit:
    post:
      tags:
        - Programming Questions
      summary: Submit Code Solution
      description: >-
        Submits code for a question, tests it against private test cases, and
        records the submission if all test cases pass.
      requestBody:
        description: Data required to submit and test the code.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code to be executed.
                  example: "def add(a, b): return a+b"
                language:
                  type: string
                  description: The programming language of the code (e.g., Python).
                  example: "python"
                private_test_cases:
                  type: array
                  items:
                    type: object
                    properties:
                      input:
                        type: array
                        description: Input for the test case.
                        items:
                          type: integer  # specifying the type of elements
                        example: [0, 0]
                      expected_output:
                        type: integer  # specifying the type of expected output
                        description: Expected output for the test case.
                        example: 0
                  description: List of private test cases to validate the code.
              
                user_id:
                  type: integer
                  description: ID of the user submitting the code.
                  example: 1
                question_id:
                  type: integer
                  description: ID of the question being solved.
                  example: 1
              required:
                - code
                - private_test_cases
                - user_id
                - question_id
      responses:
        '200':
          description: Code submitted and tested successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                    description: The score achieved based on passing test cases.
                    example:
                      1
                  message:
                    type: string
                    description: Message indicating the result of the submission.
                    example:
                      Code submitted successfully!
        '500':
          description: >-
            Internal server error, issues during code execution or saving
            submission.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing the problem.
  /api/explainCode:
    post:
      tags:
        - Programming Questions
      summary: Get Hint for Code
      description: >-
        Provides a hint or suggestion for improving or debugging the provided
        code based on the question and language.
      requestBody:
        description: Data required to generate a hint for the code.
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code snippet for which the hint is required.
                  example: "def add(a, b): return a"
                language:
                  type: string
                  description: >-
                    The programming language of the provided code (e.g., Python).
                  example: "python"
                question:
                  type: string
                  description: The question or task that the code is related to.
                  example: "Write a python function to return sum of two numbers"
              required:
                - code
                - language
                - question
      responses:
        '200':
          description: Hint successfully generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hint:
                    type: string
                    description: HTML content of the hint or suggestion.
        '500':
          description: Internal server error, issues during hint generation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing the problem.
  /api/getSolution:
    post:
      tags:
        - Programming Questions
      summary: Retrieve or Generate Efficient Code
      description: >-
        Retrieves the efficient code for a given question if available. If not
        available, generates it using AI and stores it in the database.
      requestBody:
        description: Data required to retrieve or generate efficient code.
        content:
          application/json:
            schema:
              type: object
              properties:
                question_id:
                  type: integer
                  description: >-
                    The ID of the question for which the efficient code is
                    needed.
              required:
                - question_id
      responses:
        '200':
          description: Efficient code successfully retrieved or generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  efficient_code:
                    type: string
                    description: The efficient code for the given question.
        '400':
          description: Bad request, missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: >-
                      Error message indicating the missing or invalid
                      parameters.
        '404':
          description: Question not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the question was not found.
        '500':
          description: >-
            Internal server error, issues during code generation or database
            operations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing the problem encountered.
  /api/chat:
    post:
      tags:
        - Lectures
      summary: Interact with AI for Python Programming Tutoring
      description: >-
        Allows users to interact with an AI model that behaves like a mentor, tutor, or teacher for Python programming.
        The AI provides explanations, real-world examples, and engages in conversation to better understand the student.
      requestBody:
        description: Data required to start or continue a chat session with the AI.
        content:
          application/json:
            schema:
              type: object
              properties:
                session_id:
                  type: string
                  description: >-
                    The unique identifier for the chat session. If not provided, a new session will be created.
                message:
                  type: string
                  description: >-
                    The message from the user to the AI.
              required:
                - session_id
                - message
      responses:
        '200':
          description: AI's response to the user's message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: The Bot's response message.
        '400':
          description: Bad request due to invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input data
        '500':
          description: Internal server error while chatting with AI ChatBot
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred
  /api/sentiment_analysis:
    post:
      tags:
        - Lectures
      summary: Generate sentiment analysis and feedback summary for lectures
      description: >-
        Analyzes student feedback for lectures, generates a sentiment score,
        summarizes feedback, and provides suggestions for improvement.
      responses:
        '200':
          description: Successfully generated feedback summary and sentiment analysis.
          content:
            application/json:
              schema:
                type: object
                properties:
                  lecture_feedback_summaries:
                    type: array
                    items:
                      type: object
                      properties:
                        lesson_id:
                          type: string
                          description: Unique identifier for the lecture.
                        sentiment:
                          type: number
                          description: Sentiment score for the lecture feedback, ranging from 0 to 1.
                        feedback_summary:
                          type: string
                          description: Summarized feedback provided by the AI for the lecture.
                        suggestions:
                          type: string
                          description: AI-generated suggestions for improvement based on feedback.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error occurred


